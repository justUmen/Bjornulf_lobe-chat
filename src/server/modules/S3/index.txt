import {
  GetObjectCommand,
  ListObjectsCommand,
  PutObjectCommand,
  S3Client,
} from '@aws-sdk/client-s3';
import { getSignedUrl } from '@aws-sdk/s3-request-presigner';
import { z } from 'zod';

import { fileEnv } from '@/config/file';

export const fileSchema = z.object({
  Key: z.string(),
  LastModified: z.date(),
  Size: z.number(),
});

export const listFileSchema = z.array(fileSchema);

export type FileType = z.infer<typeof fileSchema>;

const DEFAULT_S3_REGION = 'us-east-1';

export class S3 {
  private readonly client: S3Client;
  private readonly bucket: string;
  public async fileExists(key: string): Promise<boolean> {
    try {
      const command = new GetObjectCommand({
        Bucket: this.bucket,
        Key: key,
      });
      await this.client.send(command);
      return true;
    } catch (error) {
      if ((error as any).name === 'NoSuchKey') {
        return false;
      }
      throw error;
    }
  }

  constructor() {
    this.validateEnvironment();
    
    // We can assert non-null here because validateEnvironment will throw if S3_BUCKET is missing
    this.bucket = fileEnv.S3_BUCKET!;

    this.client = new S3Client({
      credentials: {
        accessKeyId: fileEnv.S3_ACCESS_KEY_ID!,
        secretAccessKey: fileEnv.S3_SECRET_ACCESS_KEY!,
      },
      endpoint: fileEnv.S3_ENDPOINT,
      forcePathStyle: true, // Needed for MinIO
      region: fileEnv.S3_REGION || DEFAULT_S3_REGION,
    });

    console.log('S3 client initialized successfully');
  }

  private validateEnvironment(): void {
    const requiredEnvVars = ['S3_ACCESS_KEY_ID', 'S3_SECRET_ACCESS_KEY', 'S3_BUCKET'] as const;
    const missingEnvVars = requiredEnvVars.filter(varName => !fileEnv[varName]);

    if (missingEnvVars.length > 0) {
      throw new Error(`Missing required environment variables: ${missingEnvVars.join(', ')}`);
    }
  }

  public async getImages(): Promise<FileType[]> {
    try {
      console.log(`Listing objects in bucket: ${this.bucket}`);
      const command = new ListObjectsCommand({ Bucket: this.bucket });
      const res = await this.client.send(command);
      
      if (!res.Contents) {
        console.warn('No contents found in the bucket');
        return [];
      }

      return listFileSchema.parse(res.Contents);
    } catch (error) {
      console.error('Error listing objects:', error);
      throw new Error('Failed to list objects from S3');
    }
  }

  public async getFileContent(key: string): Promise<string> {
    try {
      console.log(`Getting file content for key: ${key}`);
      const command = new GetObjectCommand({
        Bucket: this.bucket,
        Key: key,
      });

      const response = await this.client.send(command);

      if (!response.Body) {
        throw new Error(`No body in response for key: ${key}`);
      }

      return response.Body.transformToString();
    } catch (error) {
      console.error(`Error getting file content for key ${key}:`, error);
      throw new Error(`Failed to get file content for key: ${key}`);
    }
  }

  public async createPreSignedUrl(key: string): Promise<string> {
    try {
      console.log(`Creating pre-signed URL for key: ${key}`);
      const command = new PutObjectCommand({
        ACL: 'public-read',
        Bucket: this.bucket,
        Key: key,
      });

      const url = await getSignedUrl(this.client, command, { expiresIn: 3600 });
      console.log(`Pre-signed URL created successfully for key: ${key}`);
      return url;
    } catch (error) {
      console.error(`Error creating pre-signed URL for key ${key}:`, error);
      throw new Error(`Failed to create pre-signed URL for key: ${key}`);
    }
  }

  public async uploadFile(key: string, body: Buffer | Uint8Array | string): Promise<void> {
    try {
      console.log(`Uploading file with key: ${key}`);
      const command = new PutObjectCommand({
        Body: body,
        Bucket: this.bucket,
        Key: key,
      });

      await this.client.send(command);
      console.log(`File uploaded successfully with key: ${key}`);
    } catch (error) {
      console.error(`Error uploading file with key ${key}:`, error);
      throw new Error(`Failed to upload file with key: ${key}`);
    }
  }
}